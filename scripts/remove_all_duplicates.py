#!/usr/bin/env python3
"""
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç—Ä–æ–∫ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π,
–æ—Å—Ç–∞–≤–ª—è—è –∏—Ö —Ç–æ–ª—å–∫–æ –≤ ui –º–æ–¥—É–ª–µ.
"""

import os
import xml.etree.ElementTree as ET
from pathlib import Path
import shutil
from collections import defaultdict
import re

class AggressiveDuplicateRemover:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.ui_strings_file = self.project_root / "ui/src/main/res/values/strings.xml"
        self.backup_dir = None
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ strings.xml."""
        import subprocess
        timestamp = subprocess.check_output(['date', '+%Y%m%d_%H%M%S']).decode().strip()
        self.backup_dir = self.project_root / f"backup_strings_{timestamp}"
        self.backup_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã strings.xml
        string_files = list(self.project_root.rglob("**/res/values/strings.xml"))
        
        for file_path in string_files:
            if "backup" not in str(file_path):
                relative_path = file_path.relative_to(self.project_root)
                backup_path = self.backup_dir / relative_path
                backup_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(file_path, backup_path)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_dir}")
        
    def load_ui_strings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ ui –º–æ–¥—É–ª—è."""
        if not self.ui_strings_file.exists():
            print("‚ùå –§–∞–π–ª ui/src/main/res/values/strings.xml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return {}
            
        tree = ET.parse(self.ui_strings_file)
        root = tree.getroot()
        
        ui_strings = {}
        for string_elem in root.findall('string'):
            name = string_elem.get('name')
            value = string_elem.text or ""
            ui_strings[value] = name
            
        return ui_strings
        
    def remove_duplicates_from_file(self, file_path: Path, ui_strings: dict):
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
        if not file_path.exists():
            return 0
            
        tree = ET.parse(file_path)
        root = tree.getroot()
        
        removed_count = 0
        strings_to_remove = []
        
        for string_elem in root.findall('string'):
            name = string_elem.get('name')
            value = string_elem.text or ""
            
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ ui –º–æ–¥—É–ª–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if value in ui_strings and ui_strings[value] != name:
                strings_to_remove.append(string_elem)
                removed_count += 1
                
        # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
        for string_elem in strings_to_remove:
            root.remove(string_elem)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        if removed_count > 0:
            tree.write(file_path, encoding='utf-8', xml_declaration=True)
            
        return removed_count
        
    def remove_all_duplicates(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
        print("üîÑ –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self.create_backup()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ ui –º–æ–¥—É–ª—è
        ui_strings = self.load_ui_strings()
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ui_strings)} —Å—Ç—Ä–æ–∫ –∏–∑ ui –º–æ–¥—É–ª—è")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã strings.xml
        string_files = list(self.project_root.rglob("**/res/values/strings.xml"))
        
        total_removed = 0
        processed_files = 0
        
        for file_path in string_files:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ui –º–æ–¥—É–ª—å –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
            if "ui/src/main/res/values/strings.xml" in str(file_path) or "backup" in str(file_path):
                continue
                
            removed = self.remove_duplicates_from_file(file_path, ui_strings)
            if removed > 0:
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {removed} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ {file_path.relative_to(self.project_root)}")
                total_removed += removed
            processed_files += 1
            
        print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files}")
        print(f"üóëÔ∏è  –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {total_removed}")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {self.backup_dir}")
        
        return total_removed

def main():
    import sys
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 scripts/remove_all_duplicates.py <project_root>")
        sys.exit(1)
        
    project_root = sys.argv[1]
    remover = AggressiveDuplicateRemover(project_root)
    remover.remove_all_duplicates()

if __name__ == "__main__":
    main() 
package com.davidbugayov.financeanalyzer.domain.usecase

import com.davidbugayov.financeanalyzer.domain.model.Achievement
import com.davidbugayov.financeanalyzer.domain.repository.AchievementsRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import timber.log.Timber
import java.util.Calendar

/**
 * –î–≤–∏–∂–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
class AchievementEngine(
    private val achievementsRepository: AchievementsRepository,
    private val scope: CoroutineScope
) {
    
    private val TAG = "AchievementEngine"
    
    // –ü–æ—Ç–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    private val _newAchievements = MutableSharedFlow<Achievement>()
    val newAchievements: SharedFlow<Achievement> = _newAchievements.asSharedFlow()
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    private var transactionCount = 0
    private var statisticsViewCount = 0
    private var sectionsVisited = mutableSetOf<String>()
    private var categoriesUsed = mutableSetOf<String>()
    
    init {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        scope.launch {
            loadCurrentProgress()
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    private suspend fun loadCurrentProgress() {
        try {
            val achievements = achievementsRepository.getAllAchievements().first()
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            achievements.forEach { achievement ->
                when (achievement.id) {
                    "transaction_master" -> transactionCount = achievement.currentProgress
                    "data_analyst" -> statisticsViewCount = achievement.currentProgress
                    "app_explorer" -> {
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
                        repeat(achievement.currentProgress) {
                            sectionsVisited.add("section_$it")
                        }
                    }
                    "category_organizer" -> {
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                        repeat(achievement.currentProgress) {
                            categoriesUsed.add("category_$it")
                        }
                    }
                }
            }
            
            Timber.d("üèÜ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏=$transactionCount, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞=$statisticsViewCount, —Ä–∞–∑–¥–µ–ª—ã=${sectionsVisited.size}, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏=${categoriesUsed.size}")
        } catch (e: Exception) {
            Timber.e(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
        }
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    fun onTransactionAdded() {
        Timber.d("üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        scope.launch {
            transactionCount++
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            updateAchievementProgress("first_transaction", 1)
            updateAchievementProgress("transaction_master", transactionCount)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞—á–∏–≤–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º checkAndUnlockAchievement
            val hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY)
            checkAndUnlockAchievement("early_bird") { hour < 7 }
            checkAndUnlockAchievement("night_owl") { hour >= 23 }
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞
     */
    fun onBudgetCreated() {
        Timber.d("üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞: –ë—é–¥–∂–µ—Ç —Å–æ–∑–¥–∞–Ω")
        
        scope.launch {
            updateAchievementProgress("first_budget", 1)
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    fun onStatisticsViewed() {
        Timber.d("üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ (—Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫: $statisticsViewCount)")
        
        scope.launch {
            statisticsViewCount++
            Timber.d("üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞: –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ $statisticsViewCount")
            updateAchievementProgress("data_analyst", statisticsViewCount)
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    fun onAppSectionVisited(sectionName: String) {
        Timber.d("üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞: –ü–æ—Å–µ—â–µ–Ω —Ä–∞–∑–¥–µ–ª $sectionName")
        
        scope.launch {
            sectionsVisited.add(sectionName)
            updateAchievementProgress("app_explorer", sectionsVisited.size)
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    fun onCategoryUsed(categoryId: String) {
        Timber.d("üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è $categoryId")
        
        scope.launch {
            categoriesUsed.add(categoryId)
            updateAchievementProgress("category_organizer", categoriesUsed.size)
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞/–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
     */
    fun onSavingsChanged(newAmount: Long) {
        Timber.d("üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞: –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å: $newAmount")
        
        scope.launch {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º checkAndUnlockAchievement –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            checkAndUnlockAchievement("first_savings") { newAmount >= 1000 }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
            checkAndUnlockAchievement("money_saver") { newAmount >= 10000 }
            checkAndUnlockAchievement("wealth_builder") { newAmount >= 100000 }
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ –±—é–¥–∂–µ—Ç—É
     */
    fun onBudgetProgress(spentPercentage: Float) {
        Timber.d("üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞: –ü—Ä–æ–≥—Ä–µ—Å—Å –±—é–¥–∂–µ—Ç–∞: ${(spentPercentage * 100).toInt()}%")
        
        scope.launch {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º checkAndUnlockAchievement –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            checkAndUnlockAchievement("budget_saver") { spentPercentage < 0.8f }
            checkAndUnlockAchievement("penny_pincher") { spentPercentage < 0.5f }
        }
    }
    
    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π –∏–ª–∏ –≤–µ—Ö–∞—Ö
     */
    fun onMilestoneReached(milestoneType: String) {
        Timber.d("üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞: –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤–µ—Ö–∞ $milestoneType")
        
        scope.launch {
            when (milestoneType) {
                "week_streak" -> checkAndUnlockAchievement("consistent_user") { true }
                "month_active" -> checkAndUnlockAchievement("loyal_user") { true }
                "all_categories_used" -> checkAndUnlockAchievement("category_expert") { true }
                "backup_created" -> checkAndUnlockAchievement("safety_first") { true }
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    private suspend fun updateAchievementProgress(achievementId: String, newProgress: Int) {
        try {
            Timber.d("üèÜ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å $achievementId: $newProgress")
            val achievement = achievementsRepository.getAchievementById(achievementId).first()
            
            if (achievement != null) {
                Timber.d("üèÜ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.title}, —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${achievement.currentProgress}/${achievement.targetProgress}, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.isUnlocked}")
                
                if (!achievement.isUnlocked) {
                    val updatedProgress = minOf(newProgress, achievement.targetProgress)
                    val shouldUnlock = updatedProgress >= achievement.targetProgress
                    
                    val updatedAchievement = achievement.copy(
                        currentProgress = updatedProgress,
                        isUnlocked = shouldUnlock,
                        dateUnlocked = if (shouldUnlock) System.currentTimeMillis() else achievement.dateUnlocked
                    )
                    
                    achievementsRepository.updateAchievement(updatedAchievement)
                    
                    if (shouldUnlock && !achievement.isUnlocked) {
                        Timber.d("üèÜ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.title}")
                        _newAchievements.emit(updatedAchievement)
                    } else {
                        Timber.d("üèÜ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: ${achievement.title} - $updatedProgress/${achievement.targetProgress}")
                    }
                } else {
                    Timber.d("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.title}")
                }
            } else {
                Timber.w("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ $achievementId –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            }
        } catch (e: Exception) {
            Timber.e(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è $achievementId")
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
     */
    private suspend fun checkAndUnlockAchievement(achievementId: String, condition: () -> Boolean) {
        try {
            val achievement = achievementsRepository.getAchievementById(achievementId).first()
            
            if (achievement != null && !achievement.isUnlocked && condition()) {
                Timber.d("üèÜ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.title}")
                
                val unlockedAchievement = achievement.copy(
                    isUnlocked = true,
                    dateUnlocked = System.currentTimeMillis(),
                    currentProgress = achievement.targetProgress
                )
                
                achievementsRepository.updateAchievement(unlockedAchievement)
                _newAchievements.emit(unlockedAchievement)
            }
        } catch (e: Exception) {
            Timber.e(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è $achievementId")
        }
    }
} 
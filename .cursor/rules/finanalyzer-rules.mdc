---
description: 
globs: 
alwaysApply: true
---
Экономь токены,  выполняй только задачу
### 1. Перенос строк в ресурсы  
- Все текстовые строки (UI-тексты, сообщения, подписи и т.п.) должны быть вынесены в ресурсные файлы (`strings.xml` или аналогичные).  
- В коде используйте ссылки на ресурсы, а не хардкод строки.

### 2. Перенос размеров и цветов в ресурсы  
- Все размеры (отступы, размеры шрифтов, радиусы и т.п.) должны храниться в ресурсах (`dimens.xml`).  
- Все цвета должны быть определены в ресурсах цвета (`colors.xml`).  
- В коде используйте ссылки на ресурсы размеров и цветов.

### 3. Все ресурсы и UI-компоненты — в модуль `ui`  
- Ресурсы (строки, цвета, размеры) должны находиться в модуле `ui`.  
- Все общие UI-компоненты (кнопки, поля ввода, кастомные виджеты и т.п.), которые могут использоваться в разных частях приложения, должны быть реализованы и храниться в модуле `ui`.

### 4. Использование импортов и имён классов  
- В коде используйте только короткие имена классов (без полного пути).  
- Полные пути к классам должны указываться только в импортах.  
- Автоматически добавляйте необходимые импорты (через IDE или AI-ассистента).

### 5. Комментарии к методам  
- Для каждого публичного метода обязательно добавляйте поясняющий комментарий, описывающий:  
  - назначение метода,  
  - основные параметры,  
  - что возвращает метод (если есть).  
- Комментарии должны быть информативными и лаконичными.

## Пример оформления кода по правилам

```kotlin
import com.example.project.ui.components.CustomButton

/**
 * Создаёт кнопку с заданным текстом и обработчиком нажатия.
 *
 * @param text Текст кнопки, берётся из ресурсов строк.
 * @param onClick Лямбда, вызываемая при нажатии.
 * @return Экземпляр CustomButton.
 */
fun createButton(text: String, onClick: () -> Unit): CustomButton {
    return CustomButton(text = text, onClick = onClick)
}
```

На все запросы и ответы экономь токены
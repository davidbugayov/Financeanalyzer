package com.davidbugayov.financeanalyzer.domain.usecase.importtransactions

import android.content.Context
import android.net.Uri
import com.davidbugayov.financeanalyzer.domain.model.ImportProgressCallback
import com.davidbugayov.financeanalyzer.domain.model.ImportResult
import com.davidbugayov.financeanalyzer.domain.model.Transaction
import com.davidbugayov.financeanalyzer.domain.repository.TransactionRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.emitAll
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.withContext
import timber.log.Timber
import java.io.BufferedReader
import java.io.InputStreamReader

/**
 * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π UseCase –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–Ω–∫–∞.
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤.
 */
abstract class BankImportUseCase(
    protected val transactionRepository: TransactionRepository,
    protected val context: Context
) : ImportTransactionsUseCase {

    /**
     * –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ—Ç UseCase.
     * –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö.
     */
    abstract val bankName: String

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª (–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ BufferedReader)
     * –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞.
     * @param reader BufferedReader –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞.
     * @return true, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.
     */
    abstract fun isValidFormat(reader: BufferedReader): Boolean

    /**
     * –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ñ–∞–π–ª–µ.
     * @param reader BufferedReader –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞.
     */
    abstract fun skipHeaders(reader: BufferedReader)

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–µ –≤ –æ–±—ä–µ–∫—Ç Transaction.
     * @param line –°—Ç—Ä–æ–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞.
     * @return –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–ª–∏ null, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∞—Ä—Å–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
     * @throws Exception –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–æ–∂–Ω–æ –Ω–µ –±—Ä–æ—Å–∞—Ç—å, –∞ –≤–µ—Ä–Ω—É—Ç—å null –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å).
     */
    abstract fun parseLine(line: String): Transaction?

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ.
     * –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –∏ —Ç.–¥.
     * @param line –°—Ç—Ä–æ–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞.
     * @return true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫—É —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
     */
    open fun shouldSkipLine(line: String): Boolean {
        return line.isBlank()
    }

    /**
     * Processes transactions from a given BufferedReader.
     * This method contains the core logic for validating format, skipping headers,
     * parsing lines, and saving transactions.
     *
     * @param reader The BufferedReader to read transaction data from.
     * @param progressCallback Callback for reporting import progress.
     * @return Flow emitting import results.
     */
    protected open fun processTransactionsFromReader(
        reader: BufferedReader,
        progressCallback: ImportProgressCallback
    ): Flow<ImportResult> = flow {
        var importedCount = 0
        var skippedCount = 0
        val importedTransactions = mutableListOf<Transaction>()

        try {
            emit(ImportResult.progress(5, 100, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –±–∞–Ω–∫–∞ $bankName..."))
            // –í–∞–∂–Ω–æ: isValidFormat –º–æ–∂–µ—Ç "–ø–æ—Ç—Ä–µ–±–∏—Ç—å" —á–∞—Å—Ç—å –ø–æ—Ç–æ–∫–∞.
            // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ reader –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç mark/reset, –µ—Å–ª–∏ isValidFormat —á–∏—Ç–∞–µ—Ç –≤–ø–µ—Ä–µ–¥.
            if (!isValidFormat(reader)) {
                Timber.w("–§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –±–∞–Ω–∫–∞ $bankName")
                emit(ImportResult.error("–§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –±–∞–Ω–∫–∞ $bankName."))
                return@flow
            }

            emit(ImportResult.progress(10, 100, "–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤..."))
            skipHeaders(reader) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏

            var line = reader.readLine()
            var lineNumber = 0

            // TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.
            // –≠—Ç–æ —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–≤ –≤–µ—Å—å reader –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ.

            // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            val estimatedLines = 100 // –≠—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            while (line != null) {
                lineNumber++
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å—Ç—Ä–æ–∫
                if (lineNumber % 10 == 0) {
                    val progress = 10 + (lineNumber * 70 / estimatedLines).coerceAtMost(70)
                    emit(ImportResult.progress(progress, 100, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ $lineNumber..."))
                    progressCallback.onProgress(progress, 100, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ $lineNumber –∏–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ $estimatedLines...")
                }

                if (shouldSkipLine(line)) {
                    Timber.v("[–ò–ú–ü–û–†–¢] –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ $lineNumber –¥–ª—è –±–∞–Ω–∫–∞ $bankName: '$line'")
                } else {
                    try {
                        Timber.d("[–ò–ú–ü–û–†–¢] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ $lineNumber –¥–ª—è –±–∞–Ω–∫–∞ $bankName: '$line'")
                        val transaction = parseLine(line)
                        if (transaction != null) {
                            Timber.i("[–ò–ú–ü–û–†–¢] –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ $lineNumber: ID=${transaction.id}, –°—É–º–º–∞=${transaction.amount}, –î–∞—Ç–∞=${transaction.date}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è='${transaction.category}'")
                            importedTransactions.add(transaction)
                            importedCount++
                        } else {
                            Timber.w("[–ò–ú–ü–û–†–¢] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ —Å—Ç—Ä–æ–∫–∏ $lineNumber")
                            skippedCount++
                        }
                    } catch (e: Exception) {
                        Timber.e(e, "[–ò–ú–ü–û–†–¢] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ $lineNumber –¥–ª—è –±–∞–Ω–∫–∞ $bankName: '$line'")
                        skippedCount++
                    }
                }
                line = reader.readLine()
            }

            if (importedTransactions.isNotEmpty()) {
                Timber.i("[–ò–ú–ü–û–†–¢] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${importedTransactions.size} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–±–∞–Ω–∫ $bankName)")
                emit(ImportResult.progress(90, 100, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π..."))
                progressCallback.onProgress(90, 100, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${importedTransactions.size} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
                try {
                    Timber.d("[–ò–ú–ü–û–†–¢] –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${importedTransactions.size} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

                    var savedCount = 0
                    importedTransactions.forEach { transaction ->
                        try {
                            Timber.d("[–ò–ú–ü–û–†–¢] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ID=${transaction.id}, –°—É–º–º–∞=${transaction.amount}, –î–∞—Ç–∞=${transaction.date}")
                            Timber.i("[–ò–ú–ü–û–†–¢-–û–¢–õ–ê–î–ö–ê] ‚ö†Ô∏è –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º transactionRepository.addTransaction –¥–ª—è ID=${transaction.id}")
                            val result = transactionRepository.addTransaction(transaction)
                            Timber.i("[–ò–ú–ü–û–†–¢-–û–¢–õ–ê–î–ö–ê] ‚úÖ –ü–û–°–õ–ï –≤—ã–∑–æ–≤–∞ transactionRepository.addTransaction –¥–ª—è ID=${transaction.id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=$result")
                            savedCount++
                            Timber.d("[–ò–ú–ü–û–†–¢] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (${savedCount}/${importedTransactions.size})")
                        } catch (ex: Exception) {
                            Timber.e(ex, "[–ò–ú–ü–û–†–¢] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID=${transaction.id}: ${ex.message}")
                            Timber.e("[–ò–ú–ü–û–†–¢-–û–¢–õ–ê–î–ö–ê] üîç –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π: ID=${transaction.id}, amount=${transaction.amount}, date=${transaction.date}, category=${transaction.category}, title=${transaction.title}")
                            Timber.e("[–ò–ú–ü–û–†–¢-–û–¢–õ–ê–î–ö–ê] üîç –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: ${ex.stackTraceToString()}")
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                    Timber.i("[–ò–ú–ü–û–†–¢] –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ $savedCount –∏–∑ ${importedTransactions.size} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –±–∞–Ω–∫–∞ $bankName.")

                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    try {
                        Timber.d("[–ò–ú–ü–û–†–¢-–ü–†–û–í–ï–†–ö–ê] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ...")
                        val allTransactions = transactionRepository.getAllTransactions()
                        Timber.i("[–ò–ú–ü–û–†–¢-–ü–†–û–í–ï–†–ö–ê] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: ${allTransactions.size}")
                    } catch (e: Exception) {
                        Timber.e(e, "[–ò–ú–ü–û–†–¢-–ü–†–û–í–ï–†–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${e.message}")
                    }

                    emit(ImportResult.success(savedCount, skippedCount))
                } catch (e: Exception) {
                    Timber.e(e, "[–ò–ú–ü–û–†–¢] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${e.message}")
                    emit(ImportResult.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${e.message}"))
                }
            } else {
                Timber.w("[–ò–ú–ü–û–†–¢] –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
                emit(ImportResult.success(0, skippedCount))
            }
        } catch (e: Exception) {
            Timber.e(e, "[–ò–ú–ü–û–†–¢] ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${e.message}")
            emit(ImportResult.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${e.message}"))
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–º–ø–æ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç BufferedReader.
     * –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è PDF/Excel –º–æ–≥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å importTransactions
     * –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤ –∏—Ç–æ–≥–µ –≤—ã–∑–æ–≤–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ.
     */
    @Deprecated(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ importTransactions, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç–∞–µ—Ç —Å URI –∏ –≤—ã–∑—ã–≤–∞–µ—Ç processTransactionsFromReader. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –≤ –±—É–¥—É—â–µ–º.",
        ReplaceWith("importTransactions(uri, progressCallback)")
    )
    protected open suspend fun importFromReader(
        uri: Uri,
        progressCallback: ImportProgressCallback
    ): ImportResult = withContext(Dispatchers.IO) {
        // –≠—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç processTransactionsFromReader,
        // –Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –∫–∞–∫ —ç—Ç–æ –º–æ–≥–ª–æ –±—ã –±—ã—Ç—å.
        // –í –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ importTransactions –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç reader –∏ –≤—ã–∑—ã–≤–∞–µ—Ç processTransactionsFromReader.
        Timber.w("–í—ã–∑–≤–∞–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ importFromReader –¥–ª—è $bankName. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
        try {
            context.contentResolver.openInputStream(uri)?.use { inputStream ->
                BufferedReader(InputStreamReader(inputStream)).use { reader ->
                    // processTransactionsFromReader –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Flow, –∞ importFromReader - ImportResult.
                    // –≠—Ç–æ –Ω–µ—É–¥–æ–±–Ω–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞.
                    // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –º—ã –±—ã —Å–æ–±–∏—Ä–∞–ª–∏ Flow –∑–¥–µ—Å—å, –Ω–æ —ç—Ç–æ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.
                    // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —É—Å—Ç–∞—Ä–µ–ª.
                    // –õ–æ–≥–∏–∫–∞ –Ω–∏–∂–µ - —ç—Ç–æ —Ç–æ, —á—Ç–æ –±—ã–ª–æ –±—ã, –µ—Å–ª–∏ –±—ã –º—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∏.
                    // –í —Ç–µ–∫—É—â–µ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ, `importTransactions` –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å `processTransactionsFromReader` –Ω–∞–ø—Ä—è–º—É—é.
                    return@withContext ImportResult.error("importFromReader —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.")

                    // –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ–±—Ä–∞—Ç—å Flow, –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø):
                    /*
                    var finalResult: ImportResult = ImportResult.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç")
                    processTransactionsFromReader(reader, progressCallback)
                        .collect { result ->
                            if (result is ImportResult.Success || result is ImportResult.Error) {
                                finalResult = result
                            }
                            // –ü—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–ª—å—à–µ —á–µ—Ä–µ–∑ progressCallback,
                            // –Ω–æ progressCallback —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ processTransactionsFromReader.
                        }
                    return@withContext finalResult
                    */
                }
            } ?: ImportResult.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª $uri –¥–ª—è –±–∞–Ω–∫–∞ $bankName")
        } catch (e: Exception) {
            Timber.e(e, "–û—à–∏–±–∫–∞ –≤ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º importFromReader –¥–ª—è –±–∞–Ω–∫–∞ $bankName –∏–∑ $uri: ${e.message}")
            ImportResult.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è $bankName: ${e.message}")
        }
    }

    /**
     * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ImportTransactionsUseCase.
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∑—ã–≤–∞–µ—Ç importFromReader.
     * –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤, –Ω–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å BufferedReader (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∏–Ω–∞—Ä–Ω—ã–µ Excel –∏–ª–∏ PDF, –≥–¥–µ —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–Ω–∞—á–µ).
     */
    override fun importTransactions(
        uri: Uri,
        progressCallback: ImportProgressCallback
    ): Flow<ImportResult> = flow {
        emit(ImportResult.progress(0, 100, "–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –±–∞–Ω–∫–∞ $bankName..."))
        progressCallback.onProgress(0, 100, "–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –±–∞–Ω–∫–∞ $bankName...")

        try {
            withContext(Dispatchers.IO) {
                context.contentResolver.openInputStream(uri)?.use { inputStream ->
                    BufferedReader(InputStreamReader(inputStream)).use { reader ->
                        emitAll(processTransactionsFromReader(reader, progressCallback))
                    }
                } ?: run {
                    Timber.e("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å InputStream –¥–ª—è URI: $uri –≤ –±–∞–Ω–∫–µ $bankName")
                    emit(ImportResult.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª $uri –¥–ª—è –±–∞–Ω–∫–∞ $bankName"))
                }
            }
        } catch (e: Exception) {
            Timber.e(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤ importTransactions –¥–ª—è –±–∞–Ω–∫–∞ $bankName –∏–∑ $uri: ${e.message}")
            emit(ImportResult.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è $bankName: ${e.message}"))
        }
    }
} 
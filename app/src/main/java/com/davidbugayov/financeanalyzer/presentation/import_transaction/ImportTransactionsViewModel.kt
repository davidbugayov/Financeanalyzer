package com.davidbugayov.financeanalyzer.presentation.import_transaction

import android.app.Application
import android.net.Uri
import android.provider.OpenableColumns
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.davidbugayov.financeanalyzer.core.util.Result as CoreResult
import com.davidbugayov.financeanalyzer.data.local.dao.TransactionDao
import com.davidbugayov.financeanalyzer.domain.usecase.importtransactions.common.ImportTransactionsUseCase
import com.davidbugayov.financeanalyzer.presentation.import_transaction.model.ImportState
import com.davidbugayov.financeanalyzer.presentation.import_transaction.model.ImportTransactionsIntent
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch
import org.koin.core.component.KoinComponent
import org.koin.core.component.inject
import timber.log.Timber

/**
 * ViewModel –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏–º–ø–æ—Ä—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º UI.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω MVI (Model-View-Intent).
 */
class ImportTransactionsViewModel(
    private val importTransactionsUseCase: ImportTransactionsUseCase,
    application: Application,
) : AndroidViewModel(application), KoinComponent {
    // –ò–Ω—ä–µ–∫—Ü–∏—è TransactionDao —á–µ—Ä–µ–∑ Koin
    private val transactionDao: TransactionDao by inject()

    // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    private val _state = MutableStateFlow(ImportState())
    val state: StateFlow<ImportState> = _state.asStateFlow()

    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
    private val _uiState = MutableStateFlow<ImportUiState>(ImportUiState.Initial)

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º MVI.
     *
     * @param intent –ù–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    fun handleIntent(intent: ImportTransactionsIntent) {
        when (intent) {
            is ImportTransactionsIntent.StartImport -> startImport(intent.uri)
            is ImportTransactionsIntent.RefreshLogs -> refreshLogs()
            is ImportTransactionsIntent.ResetState -> resetState()
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–º–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
     * @param uri URI —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
     */
    private fun startImport(uri: Uri) {
        if (_state.value.isLoading) {
            Timber.d("–ò–º–ø–æ—Ä—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∑–∞–ø—Ä–æ—Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
            return
        }

        Timber.d("–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ —Å URI: $uri, —Å—Ö–µ–º–∞: ${uri.scheme}, –ø—É—Ç—å: ${uri.path}")
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        try {
            getApplication<Application>().contentResolver.openInputStream(uri)?.use { stream ->
                Timber.d("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç, —Ä–∞–∑–º–µ—Ä: ${stream.available()} –±–∞–π—Ç")
            }
        } catch (e: Exception) {
            Timber.e(e, "‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: ${e.message}")
        }

        // –ü–æ–ª—É—á–∞–µ–º MIME-—Ç–∏–ø –∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        try {
            val mimeType = getApplication<Application>().contentResolver.getType(uri)
            Timber.d("MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞: $mimeType")
            getApplication<Application>().contentResolver.query(uri, null, null, null, null)?.use { cursor ->
                if (cursor.moveToFirst()) {
                    val displayNameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
                    if (displayNameIndex != -1) {
                        val fileName = cursor.getString(displayNameIndex)
                        Timber.d("–ò–º—è —Ñ–∞–π–ª–∞: $fileName")
                    }
                }
            }
        } catch (e: Exception) {
            Timber.e(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: ${e.message}")
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
        _state.value = _state.value.copy(
            isLoading = true,
            progress = 0,
            progressMessage = "–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞...",
            error = null,
            successCount = 0,
            skippedCount = 0,
        )
        // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        _uiState.value = ImportUiState.Loading("–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞...")

        viewModelScope.launch(Dispatchers.IO) {
            try {
                importTransactionsUseCase.importTransactions(uri) { current, total, message ->
                    val progress = if (total > 0) (current * 100 / total) else 0
                    Timber.d("–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞: $current/$total ($progress%) - $message")
                    _state.value = _state.value.copy(
                        progress = progress,
                        progressMessage = message,
                    )
                    _uiState.value = ImportUiState.Loading(message, progress)
                }.collect { result ->
                    when (result) {
                        is CoreResult.Success<*> -> {
                            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞
                            @Suppress("USELESS_IS_CHECK")
                            val data = result.data

                            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                            val (importedCount, skippedCount) = try {
                                // –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                                @Suppress("UNCHECKED_CAST", "USELESS_IS_CHECK")
                                val pair = data as? Pair<*, *>
                                val imported = (pair?.first as? Number)?.toInt() ?: 0
                                val skipped = (pair?.second as? Number)?.toInt() ?: 0
                                Pair(imported, skipped)
                            } catch (e: ClassCastException) {
                                Timber.w("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
                                Pair(0, 0)
                            }

                            val successMessage = "–ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. " +
                                "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: $importedCount, " +
                                "–ü—Ä–æ–ø—É—â–µ–Ω–æ: $skippedCount"
                            Timber.d(
                                "–ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ $importedCount, –ø—Ä–æ–ø—É—â–µ–Ω–æ $skippedCount",
                            )
                            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª–∏ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
                            Timber.i(
                                "[VIEWMODEL] –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: $importedCount, –ü—Ä–æ–ø—É—â–µ–Ω–æ: $skippedCount",
                            )
                            // –ó–∞–ø—É—Å—Ç–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                            viewModelScope.launch(Dispatchers.IO) {
                                Timber.d(
                                    "[VIEWMODEL] –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É",
                                )
                                kotlinx.coroutines.delay(1000)
                                try {
                                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π transactionDao
                                    val count = transactionDao.getTransactionsCount()
                                    Timber.i(
                                        "[VIEWMODEL] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: –≤—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: $count",
                                    )
                                    // –ü–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                                    Timber.i(
                                        "[VIEWMODEL-–û–¢–õ–ê–î–ö–ê] üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã...",
                                    )
                                    try {
                                        val latestTransactions = transactionDao.getTransactionsPaginated(
                                            5,
                                            0,
                                        )
                                        if (latestTransactions.isNotEmpty()) {
                                            Timber.i(
                                                "[VIEWMODEL-–û–¢–õ–ê–î–ö–ê] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${latestTransactions.size} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                                            )
                                            latestTransactions.forEachIndexed { index, tx ->
                                                Timber.i(
                                                    "[VIEWMODEL-–û–¢–õ–ê–î–ö–ê] üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${index + 1}: ID=${tx.id}, idString=${tx.idString}, " +
                                                        "–î–∞—Ç–∞=${tx.date}, –°—É–º–º–∞=${tx.amount}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è='${tx.category}'",
                                                )
                                            }
                                        } else {
                                            Timber.e(
                                                "[VIEWMODEL-–û–¢–õ–ê–î–ö–ê] ‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ù–ï–¢ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!",
                                            )
                                        }
                                    } catch (e: Exception) {
                                        Timber.e(
                                            e,
                                            "[VIEWMODEL-–û–¢–õ–ê–î–ö–ê] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${e.message}",
                                        )
                                    }
                                    // –ï—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –¥—Ä—É–≥–∏–º –º–µ—Ç–æ–¥–æ–º
                                    try {
                                        Timber.i(
                                            "[VIEWMODEL-–û–¢–õ–ê–î–ö–ê] üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ getAllTransactions...",
                                        )
                                        val allTransactions = transactionDao.getAllTransactions()
                                        Timber.i(
                                            "[VIEWMODEL-–û–¢–õ–ê–î–ö–ê] üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ getAllTransactions: ${allTransactions.size}",
                                        )
                                    } catch (e: Exception) {
                                        Timber.e(
                                            "[VIEWMODEL-–û–¢–õ–ê–î–ö–ê] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ getAllTransactions: ${e.message}",
                                        )
                                    }
                                } catch (e: Exception) {
                                    Timber.e(
                                        e,
                                        "[VIEWMODEL] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: ${e.message}",
                                    )
                                }
                            }
                            _state.value = _state.value.copy(
                                isLoading = false,
                                successCount = importedCount,
                                skippedCount = skippedCount,
                                successMessage = successMessage,
                                error = null,
                            )
                            _uiState.value = ImportUiState.Success(
                                message = successMessage,
                                importedCount = importedCount,
                                skippedCount = skippedCount,
                            )
                        }
                        is CoreResult.Error -> {
                            val errorMessage = result.exception.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                            Timber.e(result.exception, "‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: $errorMessage")
                            _state.value = _state.value.copy(
                                isLoading = false,
                                error = errorMessage,
                            )
                            _uiState.value = ImportUiState.Error(errorMessage)
                        }
                        else -> {
                            Timber.w("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: $result")
                        }
                    }
                }
            } catch (e: Exception) {
                Timber.e(e, "‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${e.message}")
                _state.value = _state.value.copy(
                    isLoading = false,
                    error = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                )
                _uiState.value = ImportUiState.Error(e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞.
     * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è
     * —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º ImportTransactionsIntent.
     */
    private fun refreshLogs() {
        // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        Timber.d("refreshLogs called, but not implemented")
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞.
     */
    private fun resetState() {
        _state.value = ImportState()
        _uiState.value = ImportUiState.Initial
    }
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏—è UI –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
 */
sealed class ImportUiState {
    /**
     * –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–æ –Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∞.
     */
    object Initial : ImportUiState()

    /**
     * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏/–∏–º–ø–æ—Ä—Ç–∞.
     * @param message –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param progress –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ (0-100)
     */
    data class Loading(val message: String, val progress: Int = 0) : ImportUiState()

    /**
     * –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞.
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
     * @param importedCount –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     * @param skippedCount –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    data class Success(
        val message: String,
        val importedCount: Int,
        val skippedCount: Int,
    ) : ImportUiState()

    /**
     * –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏.
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    data class Error(val message: String) : ImportUiState()
}

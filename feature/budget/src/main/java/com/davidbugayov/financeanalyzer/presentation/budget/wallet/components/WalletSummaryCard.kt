package com.davidbugayov.financeanalyzer.presentation.budget.wallet.components

import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.TrendingDown
import androidx.compose.material.icons.automirrored.filled.TrendingUp
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Payment
import androidx.compose.material.icons.outlined.AccountBalanceWallet
import androidx.compose.material.icons.outlined.Timeline
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.FilledTonalButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.IconButtonDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.res.dimensionResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.davidbugayov.financeanalyzer.core.util.formatForDisplay
import com.davidbugayov.financeanalyzer.domain.model.Wallet
import com.davidbugayov.financeanalyzer.shared.achievements.AchievementTrigger
import com.davidbugayov.financeanalyzer.shared.model.Money
import com.davidbugayov.financeanalyzer.ui.R as UiR
import kotlin.math.min

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
 *
 * @param wallet –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param modifier –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
 * @param onSpendClick –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å"
 * @param onAddFundsClick –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
 * @param onManageClick –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
@Composable
fun WalletSummaryCard(
    wallet: Wallet,
    modifier: Modifier = Modifier,
    onSpendClick: () -> Unit,
    onAddFundsClick: (() -> Unit)? = null,
    onManageClick: (() -> Unit)? = null,
) {
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±—é–¥–∂–µ—Ç–∞
    val rawProgress =
        if (wallet.limit.amount > 0.0) {
            val progress = (wallet.spent.amount.toDouble() / wallet.limit.amount.toDouble()).toFloat()
            // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            timber.log.Timber.d(
                "Wallet: ${wallet.name}, Spent: ${wallet.spent.amount}, Limit: ${wallet.limit.amount}, Progress: $progress",
            )

            // –¢—Ä–∏–≥–≥–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫—É "–≠–∫–æ–Ω–æ–º–Ω—ã–π" –µ—Å–ª–∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –º–µ–Ω–µ–µ 80% –∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏–º—ã–µ —Ç—Ä–∞—Ç—ã
            if (progress > 0.1f && progress < 0.8f && wallet.spent.amount > 0.0) {
                timber.log.Timber.d(
                    "üèÜ –¢—Ä–∏–≥–≥–µ—Ä budget_saver: –ø—Ä–æ–≥—Ä–µ—Å—Å $progress < 0.8, –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${wallet.spent.amount}",
                )
                AchievementTrigger.onBudgetProgress(progress)
            } else if (progress > 0.8f) {
                // –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ —ç–∫–æ–Ω–æ–º–Ω–æ—Å—Ç–∏
            }

            progress
        } else {
            timber.log.Timber.d("Wallet: ${wallet.name}, Limit is zero or negative: ${wallet.limit.amount}")
            0f
        }

    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π
    val finalProgress =
        if (rawProgress == 0f && wallet.limit.amount > 0.0) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã, –Ω–æ –µ—Å—Ç—å –ª–∏–º–∏—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            timber.log.Timber.d("Showing test progress for wallet ${wallet.name} with zero spent amount")
            0.15f // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 15% –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        } else {
            rawProgress
        }

    val animatedProgress by animateFloatAsState(
        targetValue = min(finalProgress, 1f),
        animationSpec = tween(durationMillis = 800),
        label = "wallet_progress",
    )

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    val progressColor =
        when {
            finalProgress <= 0.5f -> MaterialTheme.colorScheme.primary
            finalProgress <= 0.8f -> Color(0xFFFFA726) // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            else -> MaterialTheme.colorScheme.error
        }

    val isOverBudget = finalProgress > 1f
    val remaining = wallet.limit - wallet.spent

    ElevatedCard(
        modifier = modifier.fillMaxWidth(),
        shape = RoundedCornerShape(dimensionResource(UiR.dimen.wallet_card_corner_radius)),
        elevation =
            CardDefaults.elevatedCardElevation(
                defaultElevation = dimensionResource(UiR.dimen.wallet_card_elevation),
            ),
        colors =
            CardDefaults.elevatedCardColors(
                containerColor = MaterialTheme.colorScheme.surface,
            ),
    ) {
        Box {
            // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
            Box(
                modifier =
                    Modifier
                        .fillMaxWidth()
                        .height(dimensionResource(UiR.dimen.wallet_gradient_height))
                        .background(
                            brush =
                                Brush.verticalGradient(
                                    colors =
                                        listOf(
                                            progressColor.copy(alpha = 0.1f),
                                            Color.Transparent,
                                        ),
                                ),
                        ),
            )

            Column(
                modifier =
                    Modifier
                        .fillMaxWidth()
                        .padding(dimensionResource(UiR.dimen.wallet_card_padding)),
            ) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –∫–æ—à–µ–ª—å–∫–∞
                WalletHeader(
                    walletName = wallet.name,
                    onManageClick = onManageClick,
                )

                Spacer(modifier = Modifier.height(dimensionResource(UiR.dimen.wallet_section_spacing)))

                // –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically,
                ) {
                    // –ö—Ä—É–≥–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    ModernProgressIndicator(
                        progress = animatedProgress,
                        progressColor = progressColor,
                        percentage = (finalProgress * 100).toInt(),
                        isOverBudget = isOverBudget,
                    )

                    Spacer(modifier = Modifier.width(dimensionResource(UiR.dimen.wallet_header_spacing)))

                    // –ú–µ—Ç—Ä–∏–∫–∏ –±—é–¥–∂–µ—Ç–∞
                    Column(
                        modifier = Modifier.weight(1f),
                        verticalArrangement = Arrangement.spacedBy(dimensionResource(UiR.dimen.wallet_metric_spacing)),
                    ) {
                        WalletMetric(
                            label = stringResource(UiR.string.wallet_spent_amount),
                            amount = wallet.spent,
                            color = MaterialTheme.colorScheme.onSurface,
                            trend = TrendType.NEUTRAL,
                        )

                        WalletMetric(
                            label = stringResource(UiR.string.wallet_remaining_amount),
                            amount = remaining,
                            color =
                                if (remaining.isNegative()) {
                                    MaterialTheme.colorScheme.error
                                } else {
                                    MaterialTheme.colorScheme.primary
                                },
                            trend = if (remaining.isNegative()) TrendType.DOWN else TrendType.UP,
                        )

                        WalletMetric(
                            label = stringResource(UiR.string.wallet_budget_limit),
                            amount = wallet.limit,
                            color = MaterialTheme.colorScheme.onSurfaceVariant,
                        )
                    }
                }

                Spacer(modifier = Modifier.height(dimensionResource(UiR.dimen.wallet_section_spacing)))

                // –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
                BalanceCard(balance = wallet.balance)

                Spacer(modifier = Modifier.height(dimensionResource(UiR.dimen.wallet_header_spacing)))

                // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                QuickActionsRow(
                    onSpendClick = onSpendClick,
                    onAddFundsClick = onAddFundsClick,
                    progressColor = progressColor,
                )
            }
        }
    }
}

/**
 * –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
 */
@Composable
private fun WalletHeader(
    walletName: String,
    onManageClick: (() -> Unit)?,
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically,
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
        ) {
            Icon(
                imageVector = Icons.Outlined.AccountBalanceWallet,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(dimensionResource(UiR.dimen.wallet_stats_icon_size)),
            )

            Spacer(modifier = Modifier.width(12.dp))

            Column {
                Text(
                    text = walletName,
                    style =
                        MaterialTheme.typography.titleLarge.copy(
                            fontWeight = FontWeight.Bold,
                        ),
                    color = MaterialTheme.colorScheme.onSurface,
                )

                Text(
                    text = stringResource(UiR.string.wallet_overview),
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.padding(top = dimensionResource(UiR.dimen.wallet_subtitle_margin_top)),
                )
            }
        }

        onManageClick?.let { onClick ->
            IconButton(
                onClick = onClick,
                colors =
                    IconButtonDefaults.iconButtonColors(
                        containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),
                    ),
            ) {
                Icon(
                    imageVector = Icons.Outlined.Timeline,
                    contentDescription = stringResource(UiR.string.wallet_manage_action),
                    tint = MaterialTheme.colorScheme.primary,
                )
            }
        }
    }
}

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—Ä—É–≥–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
@Composable
private fun ModernProgressIndicator(
    progress: Float,
    progressColor: Color,
    percentage: Int,
    isOverBudget: Boolean,
) {
    Box(
        contentAlignment = Alignment.Center,
        modifier = Modifier.size(dimensionResource(UiR.dimen.wallet_progress_size)),
    ) {
        // –§–æ–Ω–æ–≤—ã–π –∫—Ä—É–≥
        Canvas(
            modifier = Modifier.size(dimensionResource(UiR.dimen.wallet_progress_size)),
        ) {
            drawCircle(
                color = progressColor.copy(alpha = 0.1f),
                radius = (size.minDimension - 16.dp.toPx()) / 2,
                style = Stroke(width = 12.dp.toPx()),
            )
        }

        // –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        CircularProgressIndicator(
            progress = { progress },
            modifier = Modifier.size(dimensionResource(UiR.dimen.wallet_progress_size)),
            color = progressColor,
            trackColor = Color.Transparent,
            strokeWidth = dimensionResource(UiR.dimen.wallet_progress_stroke_width),
        )

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
        ) {
            Text(
                text = "$percentage%",
                style =
                    MaterialTheme.typography.headlineMedium.copy(
                        fontWeight = FontWeight.Bold,
                        fontSize = dimensionResource(UiR.dimen.wallet_progress_text_size).value.sp,
                    ),
                color = progressColor,
            )

            if (isOverBudget) {
                Text(
                    text = stringResource(UiR.string.wallet_budget_exceeded),
                    style = MaterialTheme.typography.labelSmall,
                    color = MaterialTheme.colorScheme.error,
                    textAlign = TextAlign.Center,
                    fontSize = dimensionResource(UiR.dimen.wallet_percentage_text_size).value.sp,
                )
            } else {
                Text(
                    text = stringResource(UiR.string.wallet_budget_progress),
                    style = MaterialTheme.typography.labelSmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    textAlign = TextAlign.Center,
                    fontSize = dimensionResource(UiR.dimen.wallet_percentage_text_size).value.sp,
                )
            }
        }
    }
}

/**
 * –¢–∏–ø —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏
 */
private enum class TrendType { UP, DOWN, NEUTRAL }

/**
 * –ú–µ—Ç—Ä–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ —Å —Ç—Ä–µ–Ω–¥–æ–º
 */
@Composable
private fun WalletMetric(
    label: String,
    amount: Money,
    color: Color,
    trend: TrendType = TrendType.NEUTRAL,
) {
    Column {
        Row(
            verticalAlignment = Alignment.CenterVertically,
        ) {
            Text(
                text = label,
                style =
                    MaterialTheme.typography.bodySmall.copy(
                        fontSize = dimensionResource(UiR.dimen.wallet_metric_label_text_size).value.sp,
                    ),
                color = MaterialTheme.colorScheme.onSurfaceVariant,
            )

            if (trend != TrendType.NEUTRAL) {
                Spacer(modifier = Modifier.width(4.dp))
                Icon(
                    imageVector =
                        when (trend) {
                            TrendType.UP -> Icons.AutoMirrored.Filled.TrendingUp
                            TrendType.DOWN -> Icons.AutoMirrored.Filled.TrendingDown
                            TrendType.NEUTRAL -> Icons.AutoMirrored.Filled.TrendingUp
                        },
                    contentDescription = null,
                    modifier = Modifier.size(12.dp),
                    tint =
                        when (trend) {
                            TrendType.UP -> Color(0xFF4CAF50)
                            TrendType.DOWN -> MaterialTheme.colorScheme.error
                            TrendType.NEUTRAL -> MaterialTheme.colorScheme.onSurfaceVariant
                        },
                )
            }
        }

        Text(
            text = amount.formatForDisplay(showCurrency = true, useMinimalDecimals = true),
            style =
                MaterialTheme.typography.titleMedium.copy(
                    fontWeight = FontWeight.SemiBold,
                    fontSize = dimensionResource(UiR.dimen.wallet_metric_value_text_size).value.sp,
                ),
            color = color,
        )
    }
}

/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞
 */
@Composable
private fun BalanceCard(balance: Money) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(dimensionResource(UiR.dimen.wallet_stats_card_corner_radius)),
        colors =
            CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),
            ),
    ) {
        Row(
            modifier =
                Modifier
                    .fillMaxWidth()
                    .padding(dimensionResource(UiR.dimen.wallet_stats_card_padding)),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically,
        ) {
            Column {
                Text(
                    text = stringResource(UiR.string.wallet_available_balance),
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onPrimaryContainer,
                )

                Text(
                    text = balance.formatForDisplay(showCurrency = true, useMinimalDecimals = true),
                    style =
                        MaterialTheme.typography.headlineSmall.copy(
                            fontWeight = FontWeight.Bold,
                        ),
                    color = MaterialTheme.colorScheme.primary,
                )
            }

            Icon(
                imageVector = Icons.Outlined.AccountBalanceWallet,
                contentDescription = null,
                modifier = Modifier.size(dimensionResource(UiR.dimen.icon_size_medium)),
                tint = MaterialTheme.colorScheme.primary.copy(alpha = 0.7f),
            )
        }
    }
}

/**
 * –†—è–¥ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */
@Composable
private fun QuickActionsRow(
    onSpendClick: () -> Unit,
    onAddFundsClick: (() -> Unit)?,
    progressColor: Color,
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.spacedBy(12.dp),
    ) {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å"
        Button(
            onClick = onSpendClick,
            modifier =
                Modifier
                    .weight(1f)
                    .height(dimensionResource(UiR.dimen.wallet_action_button_height)),
            shape = RoundedCornerShape(dimensionResource(UiR.dimen.wallet_action_button_corner_radius)),
            colors =
                ButtonDefaults.buttonColors(
                    containerColor = progressColor,
                ),
        ) {
            Icon(
                imageVector = Icons.Filled.Payment,
                contentDescription = null,
                modifier = Modifier.size(20.dp),
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                text = stringResource(UiR.string.wallet_spend_action),
                style =
                    MaterialTheme.typography.labelLarge.copy(
                        fontWeight = FontWeight.SemiBold,
                    ),
            )
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞)
        onAddFundsClick?.let { onClick ->
            FilledTonalButton(
                onClick = onClick,
                modifier =
                    Modifier
                        .weight(1f)
                        .height(dimensionResource(UiR.dimen.wallet_action_button_height)),
                shape = RoundedCornerShape(dimensionResource(UiR.dimen.wallet_action_button_corner_radius)),
            ) {
                Icon(
                    imageVector = Icons.Filled.Add,
                    contentDescription = null,
                    modifier = Modifier.size(20.dp),
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = stringResource(UiR.string.wallet_add_funds_action),
                    style = MaterialTheme.typography.labelLarge,
                )
            }
        }
    }
}

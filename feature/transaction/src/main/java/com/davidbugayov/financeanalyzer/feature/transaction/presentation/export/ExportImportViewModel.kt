package com.davidbugayov.financeanalyzer.feature.transaction.presentation.export

import android.app.Application
import android.content.Intent
import androidx.core.content.FileProvider
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.davidbugayov.financeanalyzer.core.util.Result
import com.davidbugayov.financeanalyzer.domain.usecase.export.ExportTransactionsToCSVUseCase
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import org.koin.core.component.KoinComponent
import org.koin.core.component.inject
import timber.log.Timber
import java.io.File

/**
 * ViewModel –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º UI –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º use case.
 */
class ExportImportViewModel(
    application: Application,
) : AndroidViewModel(application), KoinComponent {

    private val exportTransactionsToCSVUseCase: ExportTransactionsToCSVUseCase by inject()

    private val _isExporting = MutableStateFlow(false)
    val isExporting: StateFlow<Boolean> = _isExporting.asStateFlow()

    private val _exportResult = MutableStateFlow<String?>(null)
    val exportResult: StateFlow<String?> = _exportResult.asStateFlow()

    private val _exportError = MutableStateFlow<String?>(null)
    val exportError: StateFlow<String?> = _exportError.asStateFlow()

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ CSV –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
     */
    fun exportTransactions(action: ExportAction) {
        viewModelScope.launch {
            _isExporting.value = true
            _exportError.value = null
            _exportResult.value = null
            
            try {
                Timber.d("[ExportImportViewModel] –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å –¥–µ–π—Å—Ç–≤–∏–µ–º: $action")
                val result = exportTransactionsToCSVUseCase()
                
                when (result) {
                    is Result.Success<File> -> {
                        val file = result.data
                        Timber.d("[ExportImportViewModel] –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: ${file.absolutePath}")
                        
                        // –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —ç–∫—Å–ø–æ—Ä—Ç
                        com.davidbugayov.financeanalyzer.domain.achievements.AchievementTrigger.onMilestoneReached("backup_created")
                        com.davidbugayov.financeanalyzer.domain.achievements.AchievementTrigger.onMilestoneReached("export_master")
                        com.davidbugayov.financeanalyzer.domain.achievements.AchievementTrigger.onMilestoneReached("backup_enthusiast")
                        
                        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                        when (action) {
                            ExportAction.SHARE -> {
                                val shareResult = shareFile(file)
                                handleActionResult(shareResult, "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º")
                            }
                            ExportAction.OPEN -> {
                                val openResult = openFile(file)
                                handleActionResult(openResult, "–æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª")
                            }
                            ExportAction.SAVE -> {
                                _exportResult.value = "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${file.absolutePath}"
                            }
                        }
                    }
                    is Result.Error -> {
                        val errorMsg = result.exception.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"
                        Timber.e("[ExportImportViewModel] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: $errorMsg")
                        _exportError.value = errorMsg
                    }
                }
            } catch (e: Exception) {
                val errorMsg = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                Timber.e(e, "[ExportImportViewModel] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: $errorMsg")
                _exportError.value = errorMsg
            } finally {
                _isExporting.value = false
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    private fun handleActionResult(result: Result<Unit>, actionName: String) {
        when (result) {
            is Result.Success -> {
                _exportResult.value = "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, —É–¥–∞–ª–æ—Å—å $actionName"
            }
            is Result.Error -> {
                val errorMsg = result.exception.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                _exportError.value = "–§–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å $actionName: $errorMsg"
            }
        }
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    fun clearExportMessages() {
        _exportResult.value = null
        _exportError.value = null
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥
     */
    private fun openFile(file: File): Result<Unit> {
        return try {
            val context = getApplication<Application>()
            val uri = FileProvider.getUriForFile(
                context, 
                "${context.packageName}.fileprovider", 
                file
            )
            
            // –°–æ–∑–¥–∞–µ–º Intent –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ CSV —Ñ–∞–π–ª–∞
            val intent = Intent(Intent.ACTION_VIEW).apply {
                setDataAndType(uri, "text/csv")
                addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç–∫—Ä—ã—Ç—å CSV
            val resolveInfos = context.packageManager.queryIntentActivities(intent, 0)
            
            if (resolveInfos.isNotEmpty()) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                val chooserIntent = Intent.createChooser(intent, "–û—Ç–∫—Ä—ã—Ç—å CSV —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
                chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                context.startActivity(chooserIntent)
                
                Timber.d("–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
                Result.Success(Unit)
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è CSV, –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                val textIntent = Intent(Intent.ACTION_VIEW).apply {
                    setDataAndType(uri, "text/plain")
                    addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                }
                
                val textChooserIntent = Intent.createChooser(textIntent, "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç:")
                textChooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                context.startActivity(textChooserIntent)
                
                Timber.d("–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
                Result.Success(Unit)
            }
        } catch (e: Exception) {
            Timber.e(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞")
            Result.Error(com.davidbugayov.financeanalyzer.core.model.AppException.FileSystem.ReadError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: ${e.message}", e))
        }
    }
    
    /**
     * –î–µ–ª–∏—Ç—Å—è —Ñ–∞–π–ª–æ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥
     */
    private fun shareFile(file: File): Result<Unit> {
        return try {
            val context = getApplication<Application>()
            val uri = FileProvider.getUriForFile(
                context, 
                "${context.packageName}.fileprovider", 
                file
            )
            
            // –°–æ–∑–¥–∞–µ–º Intent –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
            val intent = Intent(Intent.ACTION_SEND).apply {
                type = "text/csv"
                putExtra(Intent.EXTRA_STREAM, uri)
                putExtra(Intent.EXTRA_SUBJECT, "–≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
                putExtra(Intent.EXTRA_TEXT, "üìä –§–∞–π–ª —Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä.\n\n–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
                addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            val resolveInfos = context.packageManager.queryIntentActivities(intent, 0)
            
            if (resolveInfos.isNotEmpty()) {
                val chooserIntent = Intent.createChooser(intent, "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º —á–µ—Ä–µ–∑:")
                chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                context.startActivity(chooserIntent)
                
                Timber.d("–ü–æ–∫–∞–∑–∞–Ω –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${resolveInfos.size}")
                Result.Success(Unit)
            } else {
                Timber.w("–ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤")
                Result.Error(com.davidbugayov.financeanalyzer.core.model.AppException.FileSystem.ReadError("–ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤", null))
            }
        } catch (e: Exception) {
            Timber.e(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
            Result.Error(com.davidbugayov.financeanalyzer.core.model.AppException.FileSystem.ReadError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º: ${e.message}", e))
        }
    }

    /**
     * –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.
     */
    enum class ExportAction {
        SHARE,  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º
        OPEN,   // –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
        SAVE,   // –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    }
}

package com.davidbugayov.financeanalyzer.presentation.import_transaction

import android.Manifest
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.provider.Settings
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.animateContentSize
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.tween
import androidx.compose.animation.expandVertically
import androidx.compose.animation.fadeIn
import androidx.compose.animation.slideInVertically
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.CloudUpload
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material.icons.filled.KeyboardArrowUp
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.FloatingActionButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.davidbugayov.financeanalyzer.feature.transaction.R
import com.davidbugayov.financeanalyzer.presentation.import_transaction.components.BankInstructionDialog
import com.davidbugayov.financeanalyzer.presentation.import_transaction.components.BanksList
import com.davidbugayov.financeanalyzer.presentation.import_transaction.components.ImportProgressSection
import com.davidbugayov.financeanalyzer.presentation.import_transaction.components.ImportResults
import com.davidbugayov.financeanalyzer.presentation.import_transaction.components.ImportResultsSection
import com.davidbugayov.financeanalyzer.presentation.import_transaction.model.ImportTransactionsIntent
import com.davidbugayov.financeanalyzer.ui.R as UiR
import com.davidbugayov.financeanalyzer.ui.components.AppTopBar
import com.davidbugayov.financeanalyzer.ui.components.PermissionDialogs.SettingsPermissionDialog
import com.davidbugayov.financeanalyzer.ui.theme.FinanceAnalyzerTheme
import com.davidbugayov.financeanalyzer.utils.PermissionUtils
import com.davidbugayov.financeanalyzer.utils.PreferencesManager
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import org.koin.androidx.compose.koinViewModel
import org.koin.compose.koinInject
import timber.log.Timber

/**
 * –≠–∫—Ä–∞–Ω –∏–º–ø–æ—Ä—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω MVI (Model-View-Intent) –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å ViewModel.
 *
 * @param onNavigateBack –ö–æ–ª–±—ç–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
 * @param viewModel ViewModel –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ImportTransactionsScreen(
    onNavigateBack: () -> Unit,
    viewModel: ImportTransactionsViewModel = koinViewModel(),
    preferencesManager: PreferencesManager = koinInject(),
) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å —ç–∫—Ä–∞–Ω–∞
    DisposableEffect(key1 = Unit) {
        onDispose {
            viewModel.handleIntent(ImportTransactionsIntent.ResetState)
        }
    }

    val context = LocalContext.current
    val themeMode by preferencesManager.themeModeFlow.collectAsState()
    val coroutineScope = rememberCoroutineScope()

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ ViewModel –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å MVI
    val state by viewModel.state.collectAsState()

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    LaunchedEffect(state) {
        Timber.d(
            "[SCREEN-DEBUG] üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: isLoading=${state.isLoading}, successCount=${state.successCount}, error=${state.error}",
        )
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ UI
    var showBankInstructionDialog by remember { mutableStateOf(false) }
    var selectedBank by remember { mutableStateOf("") }
    var showPermissionSettingsDialog by remember { mutableStateOf(false) }
    var expandedInstructions by remember { mutableStateOf(false) }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    var showBanksList by remember { mutableStateOf(false) }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    LaunchedEffect(Unit) {
        delay(100)
        showBanksList = true
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ URI –ø–æ MVI –ø–∞—Ç—Ç–µ—Ä–Ω—É
    fun processUri(selectedUri: Uri?) {
        if (selectedUri != null) {
            viewModel.handleIntent(ImportTransactionsIntent.StartImport(selectedUri))
        }
    }

    // –ù–∞ Android 15 –∏—Å–ø–æ–ª—å–∑—É–µ–º GetContent –Ω–∞–ø—Ä—è–º—É—é
    val getContentLauncher =
        rememberLauncherForActivityResult(
            contract = ActivityResultContracts.GetContent(),
        ) { selectedUri ->
            processUri(selectedUri)
        }

    // –ù–∞ Android < 15 –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    val filePickerLauncher =
        rememberLauncherForActivityResult(
            contract = ActivityResultContracts.OpenDocument(),
        ) { selectedUri ->
            processUri(selectedUri)
        }

    // –õ–∞—É–Ω—á–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    val permissionLauncher =
        rememberLauncherForActivityResult(
            contract = ActivityResultContracts.RequestPermission(),
        ) { isGranted ->
            if (isGranted) {
                filePickerLauncher.launch(
                    arrayOf(
                        "text/csv",
                        "application/pdf",
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    ),
                )
            } else {
                val activity = context as? Activity
                val permission = PermissionUtils.getReadStoragePermission()

                if (activity != null) {
                    if (!activity.shouldShowRequestPermissionRationale(permission)) {
                        showPermissionSettingsDialog = true
                    }
                }
            }
        }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    fun checkAndRequestPermissions() {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        Timber.d(
            "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º: isLoading=${state.isLoading}, error=${state.error}, successCount=${state.successCount}",
        )

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        viewModel.handleIntent(ImportTransactionsIntent.ResetState)

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        coroutineScope.launch {
            delay(100)
            Timber.d(
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: isLoading=${state.isLoading}, error=${state.error}, successCount=${state.successCount}",
            )

            if (Build.VERSION.SDK_INT >= 35) {
                // Android 15+ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π API, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                getContentLauncher.launch("*/*")
            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                // Android 13+ –∏ 14 —Ç—Ä–µ–±—É—é—Ç –Ω–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                permissionLauncher.launch(PermissionUtils.getReadStoragePermission())
            } else if (PermissionUtils.hasReadExternalStoragePermission(context)) {
                // –î–ª—è Android 12 –∏ –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å
                filePickerLauncher.launch(
                    arrayOf(
                        "text/csv",
                        "application/pdf",
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    ),
                )
            } else {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è Android 12 –∏ –Ω–∏–∂–µ
                permissionLauncher.launch(Manifest.permission.READ_EXTERNAL_STORAGE)
            }
        }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    FinanceAnalyzerTheme(themeMode = themeMode) {
        // –î–∏–∞–ª–æ–≥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (showPermissionSettingsDialog) {
            SettingsPermissionDialog(
                onOpenSettings = {
                    openApplicationSettings(context)
                    showPermissionSettingsDialog = false
                },
                onDismiss = { showPermissionSettingsDialog = false },
            )
        }

        Scaffold(
            topBar = {
                AppTopBar(
                    title = stringResource(R.string.import_transactions_title),
                    showBackButton = true,
                    onBackClick = onNavigateBack,
                )
            },
            floatingActionButton = {
                // –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                FloatingActionButton(
                    onClick = { checkAndRequestPermissions() },
                    containerColor = MaterialTheme.colorScheme.primary,
                    contentColor = MaterialTheme.colorScheme.onPrimary,
                    shape = CircleShape,
                    modifier = Modifier.size(64.dp),
                    elevation =
                        FloatingActionButtonDefaults.elevation(
                            defaultElevation = 6.dp,
                            pressedElevation = 8.dp,
                        ),
                ) {
                    Icon(
                        imageVector = Icons.Default.Add,
                        contentDescription = stringResource(R.string.choose_file_button),
                        modifier = Modifier.size(32.dp),
                    )
                }
            },
        ) { paddingValues ->
            Box(
                modifier =
                    Modifier
                        .fillMaxSize()
                        .padding(paddingValues),
            ) {
                Column(
                    modifier =
                        Modifier
                            .fillMaxSize()
                            .padding(horizontal = 16.dp)
                            .verticalScroll(rememberScrollState()),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(16.dp),
                ) {
                    // –°–µ–∫—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–∞—è)
                    Card(
                        modifier =
                            Modifier
                                .fillMaxWidth()
                                .padding(top = 16.dp),
                        colors =
                            CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.7f),
                            ),
                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
                    ) {
                        Column(
                            modifier =
                                Modifier
                                    .fillMaxWidth()
                                    .animateContentSize(),
                        ) {
                            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
                            Row(
                                modifier =
                                    Modifier
                                        .fillMaxWidth()
                                        .padding(16.dp),
                                verticalAlignment = Alignment.CenterVertically,
                                horizontalArrangement = Arrangement.SpaceBetween,
                            ) {
                                Text(
                                    text = stringResource(R.string.how_to_import),
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Bold,
                                )

                                IconButton(onClick = { expandedInstructions = !expandedInstructions }) {
                                    Icon(
                                        imageVector =
                                            if (expandedInstructions) {
                                                Icons.Default.KeyboardArrowUp
                                            } else {
                                                Icons.Default.KeyboardArrowDown
                                            },
                                        contentDescription = null,
                                    )
                                }
                            }

                            // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ)
                            AnimatedVisibility(visible = expandedInstructions) {
                                Column(
                                    modifier =
                                        Modifier
                                            .fillMaxWidth()
                                            .padding(horizontal = 16.dp, vertical = 8.dp),
                                ) {
                                    Text(
                                        text = stringResource(R.string.import_instructions),
                                        style = MaterialTheme.typography.bodyMedium,
                                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                                    )

                                    // –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                                    Button(
                                        onClick = { checkAndRequestPermissions() },
                                        modifier =
                                            Modifier
                                                .fillMaxWidth()
                                                .padding(vertical = 16.dp),
                                        colors =
                                            ButtonDefaults.buttonColors(
                                                containerColor = MaterialTheme.colorScheme.primary,
                                            ),
                                    ) {
                                        Icon(
                                            imageVector = Icons.Default.CloudUpload,
                                            contentDescription = null,
                                            modifier = Modifier.padding(end = 8.dp),
                                        )
                                        Text(text = stringResource(R.string.choose_file_button))
                                    }
                                }
                            }
                        }
                    }

                    // –°–µ–∫—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞ –∏–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤—ã—à–µ —Å–µ–∫—Ü–∏–∏ –±–∞–Ω–∫–æ–≤
                    AnimatedVisibility(
                        visible = state.isLoading || state.successCount > 0 || state.error != null,
                        enter = fadeIn() + expandVertically(),
                    ) {
                        Card(
                            modifier =
                                Modifier
                                    .fillMaxWidth()
                                    .padding(vertical = 24.dp),
                            // –£–≤–µ–ª–∏—á–µ–Ω—ã –æ—Ç—Å—Ç—É–ø—ã
                            colors =
                                CardDefaults.cardColors(
                                    containerColor = MaterialTheme.colorScheme.surface,
                                ),
                            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp), // –£–≤–µ–ª–∏—á–µ–Ω–∞ —Ç–µ–Ω—å
                        ) {
                            Column(
                                modifier =
                                    Modifier
                                        .fillMaxWidth()
                                        .padding(20.dp),
                                // –£–≤–µ–ª–∏—á–µ–Ω—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
                            ) {
                                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
                                Row(
                                    modifier =
                                        Modifier
                                            .fillMaxWidth()
                                            .padding(bottom = 16.dp),
                                    horizontalArrangement = Arrangement.SpaceBetween,
                                    verticalAlignment = Alignment.CenterVertically,
                                ) {
                                    Text(
                                        text = stringResource(R.string.import_results),
                                        style = MaterialTheme.typography.titleLarge,
                                        fontWeight = FontWeight.Bold,
                                    )

                                    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (X)
                                    IconButton(
                                        onClick = {
                                            viewModel.handleIntent(ImportTransactionsIntent.ResetState)
                                        },
                                    ) {
                                        Icon(
                                            imageVector = Icons.Default.Close,
                                            contentDescription = stringResource(UiR.string.cancel),
                                            tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),
                                        )
                                    }
                                }

                                when {
                                    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                    state.isLoading -> {
                                        ImportProgressSection(
                                            progress = state.progress,
                                            message = state.progressMessage,
                                            modifier = Modifier.padding(top = 8.dp), // –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
                                            fileName = state.fileName,
                                            bankName = state.bankName,
                                        )
                                    }
                                    // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—Ö–∞
                                    // –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
                                    state.successCount > 0 -> {
                                        ImportResultsSection(
                                            importResults =
                                                ImportResults(
                                                    importedCount = state.successCount,
                                                    skippedCount = state.skippedCount,
                                                    errorMessage = null, // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                                                    fileName = state.fileName,
                                                    bankName = state.bankName,
                                                ),
                                            modifier = Modifier.padding(top = 8.dp), // –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
                                        )
                                    }
                                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                                    state.error != null -> {
                                        ImportResultsSection(
                                            importResults =
                                                ImportResults(
                                                    importedCount = 0,
                                                    skippedCount = 0,
                                                    errorMessage = state.error,
                                                    fileName = state.fileName,
                                                    bankName = state.bankName,
                                                ),
                                            modifier = Modifier.padding(top = 8.dp), // –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
                                        )
                                    }
                                }
                            }
                        }
                    }

                    // –°–µ–∫—Ü–∏—è –±–∞–Ω–∫–æ–≤ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
                    Card(
                        modifier =
                            Modifier
                                .fillMaxWidth()
                                .padding(bottom = 80.dp),
                        // –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è FAB
                        colors =
                            CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.surface,
                            ),
                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
                    ) {
                        Column(
                            modifier =
                                Modifier
                                    .fillMaxWidth()
                                    .padding(16.dp),
                        ) {
                            Text(
                                text = stringResource(R.string.supported_banks_title),
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold,
                                modifier = Modifier.padding(bottom = 12.dp),
                            )

                            AnimatedVisibility(
                                visible = showBanksList,
                                enter =
                                    fadeIn(animationSpec = tween(700)) +
                                        slideInVertically(
                                            initialOffsetY = { 50 },
                                            animationSpec =
                                                spring(
                                                    dampingRatio = Spring.DampingRatioLowBouncy,
                                                    stiffness = Spring.StiffnessLow,
                                                ),
                                        ),
                            ) {
                                BanksList(
                                    onBankClick = { bank ->
                                        selectedBank = bank
                                        showBankInstructionDialog = true
                                    },
                                )
                            }
                        }
                    }
                }
            }

            // –î–∏–∞–ª–æ–≥ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –≤—ã–ø–∏—Å–∫–∏ –∏–∑ –±–∞–Ω–∫–∞
            if (showBankInstructionDialog) {
                BankInstructionDialog(
                    bankName = selectedBank,
                    onDismiss = { showBankInstructionDialog = false },
                )
            }
        }
    }
}

fun openApplicationSettings(context: Context) {
    val intent =
        Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
            data = Uri.fromParts("package", context.packageName, null)
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        }
    try {
        context.startActivity(intent)
    } catch (e: Exception) {
        Timber.e(e, "Failed to open application settings")
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å Toast –∏–ª–∏ Snackbar –æ–± –æ—à–∏–±–∫–µ
    }
}
